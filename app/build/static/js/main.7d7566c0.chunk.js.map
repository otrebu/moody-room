{"version":3,"sources":["components/pages/home.js","components/person/Emoji.js","components/person/Listing.js","Contexts/AppContext.js","components/pages/current.js","components/pages/history.js","components/pages/settings.js","components/Routes.js","components/shared/SiteHeader.js","components/shared/Menu.js","Contexts/Themes.js","App.js","serviceWorker.js","index.js"],"names":["Home","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","Link","to","React","Component","Emoji","_this$props$person","props","person","mood","facialAttributes","facialAttributeClasses","hasBeard","hasGlasses","hasMoustache","hasSunglasses","concat","width","viewBox","fill","stroke","strokeWidth","d","PersonListing","_this","call","state","personList","setState","prevProps","prevState","snapshot","hideTimestamp","timestamp","Date","hr","getHours","min","getMinutes","ampm","formatTime","map","index","person_Emoji","AppContext","createContext","Current","Consumer","appStore","moodSummary","happy","filter","name","happyCount","count","sad","sadCount","undefined","Listing_PersonListing","History","hiddenClass","moodDataList","timer","timelapseDuration","moodLabels","moodTotals","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","currentPersonListIndex","personDataList","data","updatePersonList","moodTotalData","i","_this2","wrap","_context","prev","next","match","params","fetch","then","results","json","sent","moodTimeFrames","moodTimestampSummary","listIndex","length","clearInterval","setInterval","console","log","stop","_this$state","timelapseDurationInMinutes","chartData","labels","datasets","label","backgroundColor","borderWidth","es","height","Settings","onClick","e","preventDefault","method","headers","Headers","Authorization","Content-Type","Routes","Switch","Route","exact","path","component","SiteHeader","_this$props","toggleNavigation","iconClassName","NavLink","Menu","navigationClass","activeClassName","Themes","navigation","isOpen","icon","openedClassName","closedClassName","container","moods","angry","confused","disgusted","surprised","calm","unknown","toggleNavigationHandler","App","happys","isNavigationOpen","navigationClassName","isDataLoaded","currentMoodTimer","requestCurrentData","status","commonMoodName","commonMood","BrowserRouter","Provider","SiteHeader_SiteHeader","Menu_Menu","components_Routes","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d7566c0.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"content-container f-text-center\">\n                    <h3>\n                        In todays world, humans frequently hide their emotions.\n                        <br />\n                        Lets allow machines to display them for us again....\n                    </h3>\n                    <p />\n                    <p />\n                    <p />\n                    <h5>\n                        <Link to=\"/current\">View the current moods</Link>\n                    </h5>\n                    <h5>\n                        <Link to=\"/history\">View a timelapse of recorded moods</Link>\n                    </h5>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nclass Emoji extends Component {\n    render() {\n        const { mood, facialAttributes } = this.props.person;\n        let facialAttributeClasses = '';\n\n        if (facialAttributes.hasBeard) {\n            facialAttributeClasses += ' has-beard';\n        }\n        if (facialAttributes.hasGlasses) {\n            facialAttributeClasses += ' has-glasses';\n        }\n        if (facialAttributes.hasMoustache) {\n            facialAttributeClasses += ' has-moustache';\n        }\n        if (facialAttributes.hasSunglasses) {\n            facialAttributeClasses += ' has-sunglasses';\n        }\n\n        return (\n            <div className={`smiley mood-${mood} ${facialAttributeClasses}`}>\n                <div className=\"face\">\n                    <div className=\"eye left\">\n                        <svg width=\"30%\" viewBox=\"0 0 30 42\" className=\"tear\">\n                            <path\n                                fill=\"#66b2ff\"\n                                stroke=\"transparent\"\n                                strokeWidth=\"0\"\n                                d=\"M15 3\n                                         Q16.5 6.8 25 18\n                                         A12.8 12.8 0 1 1 5 18\n                                         Q13.5 6.8 15 3z\"\n                            />\n                        </svg>\n                    </div>\n                    <div className=\"eye right\" />\n                    <div className=\"mouth\" />\n                    <div className=\"beard\" />\n                    <div className=\"moustache left\" />\n                    <div className=\"moustache right\" />\n                    <div className=\"glasses eye-glasses\">\n                        <div className=\"g-top \" />\n                        <div className=\"g-left glass\" />\n                        <div className=\"g-right glass\" />\n                    </div>\n                    <div className=\"glasses sunglasses\">\n                        <div className=\"g-top\" />\n                        <div className=\"g-left glass\" />\n                        <div className=\"g-right glass\" />\n                    </div>\n                    <div className=\"eyebrow left\" />\n                    <div className=\"eyebrow right\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Emoji;\n","import React from 'react';\nimport Emoji from './Emoji';\n\nexport class PersonListing extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            personList: {}\n        };\n    }\n\n    componentDidMount() {\n        this.setState((state, props) => ({\n            personList: props.personList\n        }));\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps !== this.props) {\n            this.setState((state, props) => ({\n                personList: props.personList\n            }));\n        }\n    }\n\n    render() {\n        const { personList } = this.state;\n        const { hideTimestamp } = this.props;\n\n        const formatTime = timestamp => {\n            let d = new Date(timestamp);\n            let hr = d.getHours();\n            let min = d.getMinutes();\n            if (min < 10) {\n                min = '0' + min;\n            }\n            let ampm = 'am';\n            if (hr > 12) {\n                hr -= 12;\n                ampm = 'pm';\n            }\n            return hr + ':' + min + ampm;\n        };\n\n        return (\n            <div className=\"listing-container\">\n                {personList && personList.facialAttributes ? (\n                    <div className=\"wrapper\">\n                        {personList.timestamp && !hideTimestamp ? (\n                            <div className=\"fw\">\n                                <h5>Time: {formatTime(personList.timestamp)}</h5>\n                            </div>\n                        ) : null}\n                        {personList.facialAttributes.map(function(person, index) {\n                            return <Emoji key={index} person={person} />;\n                        })}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nexport const AppContext = React.createContext({});\n","import React from 'react';\nimport { PersonListing } from '../person/Listing';\nimport { AppContext } from '../../Contexts/AppContext';\n\nexport class Current extends React.Component {\n    render() {\n        return (\n            <AppContext.Consumer>\n                {appStore => {\n                    let { moodSummary } = appStore;\n                    const happy = moodSummary.filter(mood => mood.name === 'happy')[0];\n                    const happyCount = happy ? happy.count : 0;\n\n                    const sad = moodSummary.filter(mood => mood.name === 'sad')[0];\n                    const sadCount = sad ? sad.count : 0;\n                    moodSummary = moodSummary\n                        .map(mood => {\n                            if (mood.name !== 'happy' && mood.name !== 'sad') {\n                                return mood;\n                            }\n                        })\n                        .filter(mood => mood !== undefined);\n                    return (\n                        <div>\n                            <div className=\"title-container\">\n                                <h2>Current Moods</h2>\n                            </div>\n\n                            <div className=\"content-container\">\n                                <div>\n                                    <span className=\"smiley-tag\">Happy: {happyCount}</span>\n                                    <span className=\"smiley-tag\">Sad: {sadCount}</span>\n                                    {moodSummary.map(mood => (\n                                        <span key={mood.name} className=\"smiley-tag\">\n                                            {mood.name}: {mood.count}\n                                        </span>\n                                    ))}\n                                </div>\n                            </div>\n                            <div>\n                                <PersonListing\n                                    personList={appStore.personList}\n                                    hideTimestamp={true}\n                                />\n                            </div>\n                        </div>\n                    );\n                }}\n            </AppContext.Consumer>\n        );\n    }\n}\n","import React from 'react';\nimport { PersonListing } from '../person/Listing';\nimport { Radar, Pie } from 'react-chartjs-2';\n\nexport class History extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hiddenClass: 'hidden',\n            moodDataList: [],\n            personList: [],\n            timer: null,\n            timelapseDuration: 50,\n            moodLabels: [\n                'Happy',\n                'Sad',\n                'Angry',\n                'Surprised',\n                'Disgusted',\n                'Calm',\n                'Confused',\n                'Unknown'\n            ],\n            moodTotals: [0, 0, 0, 0, 0, 0, 0, 0]\n        };\n    }\n\n    async componentDidMount() {\n        let currentPersonListIndex = 0;\n        let personDataList = [];\n        let moodDataList = [];\n        const timelapseDuration = this.props.match.params.count || 250;\n\n        const data = await fetch('http://52.56.44.112/api/moods/last/' + timelapseDuration).then(\n            results => {\n                return results.json();\n            }\n        );\n        if (data != null) {\n            personDataList = data.moodTimeFrames;\n            moodDataList = data.moodTimestampSummary;\n        }\n\n        const updatePersonList = listIndex => {\n            if (currentPersonListIndex < personDataList.length) {\n                this.setState({\n                    personList: personDataList[listIndex]\n                });\n            } else {\n                currentPersonListIndex = 0;\n                clearInterval(this.state.timer);\n            }\n        };\n\n        updatePersonList(currentPersonListIndex);\n\n        this.setState({\n            timer: setInterval(function() {\n                currentPersonListIndex++;\n                updatePersonList(currentPersonListIndex);\n            }, timelapseDuration > 50 ? 500 : 1000),\n            moodDataList: moodDataList\n        });\n\n        const moodTotalData = [0, 0, 0, 0, 0, 0, 0, 0];\n        console.log('this.state.moodDataList.length', this.state.moodDataList.length);\n        for (let i = 0; i < this.state.moodDataList.length; i++) {\n            const mood = moodDataList[i];\n            console.log('mood', mood);\n            if (mood.name === 'happy') {\n                moodTotalData[0] = mood.count;\n            }\n            if (mood.name === 'sad') {\n                moodTotalData[1] = mood.count;\n            }\n            if (mood.name === 'angry') {\n                moodTotalData[2] = mood.count;\n            }\n            if (mood.name === 'surprised') {\n                moodTotalData[3] = mood.count;\n            }\n            if (mood.name === 'disgusted') {\n                moodTotalData[4] = mood.count;\n            }\n            if (mood.name === 'calm') {\n                moodTotalData[5] = mood.count;\n            }\n            if (mood.name === 'confused') {\n                moodTotalData[6] = mood.count;\n            }\n            if (mood.name === 'unknown') {\n                moodTotalData[7] = mood.count;\n            }\n        }\n\n        this.setState({\n            moodTotals: moodTotalData\n        });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n\n    render() {\n        const { personList, hiddenClass, moodTotals, moodLabels } = this.state;\n        const timelapseDuration = this.props.match.params.count || 250;\n\n        const timelapseDurationInMinutes = timelapseDuration / 2;\n        const chartData = {\n            labels: moodLabels,\n            datasets: [\n                {\n                    label: 'Moods',\n                    data: moodTotals,\n                    backgroundColor: [\n                        '#ffff00',\n                        '#3366cc',\n                        '#ff0000',\n                        '#7303c0',\n                        '#295e70',\n                        '#86dcf9',\n                        '#71b280',\n                        '#664400'\n                    ]\n                }\n            ],\n            borderWidth: 1\n        };\n\n        return (\n            <div>\n                <h2>History</h2>\n                <h4>Timelapse of the last {timelapseDurationInMinutes} minutes</h4>\n\n                <div className={`content-container ${hiddenClass}`}>\n                    {personList ? <PersonListing personList={personList} /> : null}\n                </div>\n                <h2>Historical Chart</h2>\n                {/* <Radar data={chartData} width={400} height={400} /> */}\n                <br />\n                <Pie data={chartData} width={400} height={400} />\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nexport class Settings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: null\n        };\n    }\n\n    render() {\n        const handleListLights = e => {\n            e.preventDefault();\n\n            fetch('https://api.lifx.com/v1/lights/all/effects/pulse', {\n                method: 'POST',\n                headers: new Headers({\n                    Authorization:\n                        'Authorization: Bearer c00033299035cd9fb23d71440b561689301ba07792a4408a20144d0a57f21143',\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                }),\n                //data: 'power=on'\n                data: \"period=2 cycles=5 color=green'\"\n            }).then(results => {\n                console.log(results);\n            });\n        };\n\n        return (\n            <div>\n                <button className=\"btn\" onClick={handleListLights}>\n                    Turn light on\n                </button>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Home } from './pages/home';\nimport { Current } from './pages/current';\nimport { History } from './pages/history';\nimport { Settings } from './pages/settings';\n\nconst Routes = () => (\n    <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/current\" component={Current} />\n        <Route exact path=\"/history/\" component={History} />\n        <Route exact path=\"/history/:count\" component={History} />\n        {/* <Route exact path=\"/people\" component={People} /> */}\n        <Route exact path=\"/settings\" component={Settings} />\n    </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport class SiteHeader extends React.Component {\n    render() {\n        const { toggleNavigation, iconClassName } = this.props;\n\n        return (\n            <header>\n                <div className=\"menu-trigger\" onClick={toggleNavigation}>\n                    <i className={'far ' + iconClassName} />\n                </div>\n                <div className=\"logo\">\n                    <NavLink to=\"/\">\n                        <h4>Moody Room</h4>\n                    </NavLink>\n                </div>\n            </header>\n        );\n    }\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport class Menu extends React.Component {\n    render() {\n        const { toggleNavigation, navigationClass } = this.props;\n\n        return (\n            <div>\n                <div className={`navigation ${navigationClass}`}>\n                    <h2>\n                        <NavLink to=\"/\" onClick={toggleNavigation}>\n                            Home\n                        </NavLink>\n                    </h2>\n                    <h2>\n                        <NavLink to=\"/current\" onClick={toggleNavigation}>\n                            Current\n                        </NavLink>\n                    </h2>\n                    <h2>\n                        <NavLink to=\"/history\" activeClassName=\"active\" onClick={toggleNavigation}>\n                            History\n                        </NavLink>\n                    </h2>\n                    {/* <h2>\n                        <NavLink\n                            to=\"/people\"\n                            activeClassName=\"active\"\n                            onClick={toggleNavigation}\n                        >\n                            People\n                        </NavLink>\n                    </h2> */}\n                    {/* <h2>\n                        <NavLink to=\"/settings\" activeClassName=\"active\" onClick={toggleNavigation}>\n                            Settings\n                        </NavLink>\n                    </h2> */}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nexport const Themes = {\n    navigation: {\n        isOpen: false,\n        icon: {\n            openedClassName: 'fa-times',\n            closedClassName: 'fa-bars'\n        },\n        container: {\n            openedClassName: 'open',\n            closedClassName: ''\n        }\n    },\n    moods: {\n        happy: 'bg-happy',\n        sad: 'bg-sad',\n        angry: 'bg-angry',\n        confused: 'bg-confused',\n        disgusted: 'bg-disgusted',\n        surprised: 'bg-surprised',\n        calm: 'bg-calm',\n        unknown: 'bg-unknown'\n    },\n    toggleNavigationHandler: () => {}\n};\n\nexport const ThemeContext = React.createContext(Themes.moods.happys);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Routes from './components/Routes';\nimport { SiteHeader } from './components/shared/SiteHeader';\nimport { Menu } from './components/shared/Menu';\nimport { Themes } from './Contexts/Themes';\nimport { AppContext } from './Contexts/AppContext';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isNavigationOpen: Themes.navigation.isOpen,\n            navigationClassName: Themes.navigation.container.closedClassName,\n            iconClassName: Themes.navigation.icon.closedClassName,\n            appStore: {},\n            timer: null,\n            isDataLoaded: false,\n            currentMoodTimer: null\n        };\n\n        this.toggleNavigation = () => {\n            this.setState(state => ({\n                isNavigationOpen: state.isNavigationOpen ? false : true,\n\n                navigationClassName: state.isNavigationOpen\n                    ? Themes.navigation.container.closedClassName\n                    : Themes.navigation.container.openedClassName,\n\n                iconClassName: state.isNavigationOpen\n                    ? Themes.navigation.icon.closedClassName\n                    : Themes.navigation.icon.openedClassName\n            }));\n        };\n    }\n\n    componentDidMount() {\n        let requestCurrentData = () =>\n            fetch('http://52.56.44.112/api/moods/current/')\n                .then(results => {\n                    if (results.status === 200) {\n                        return results.json();\n                    } else {\n                        return null;\n                    }\n                })\n                .then(data => {\n                    if (data != null) {\n                        const { moodSummary } = data;\n                        const commonMoodName = data.commonMood ? data.commonMood.name : 'unknown';\n                        const personList = data;\n\n                        this.setState({\n                            appStore: {\n                                commonMoodName,\n                                moodSummary,\n                                personList\n                            },\n                            isDataLoaded: true\n                        });\n                    }\n                });\n\n        requestCurrentData();\n\n        this.setState({\n            timer: setInterval(function() {\n                requestCurrentData();\n                console.log('get again');\n            }, 15000)\n        });\n    }\n\n    // componentWillUnmount() {\n    //     console.log('main app timer stopped');\n    //     clearInterval(this.state.timer);\n    // }\n\n    render() {\n        const { appStore, iconClassName, navigationClassName, isDataLoaded } = this.state;\n        const { commonMoodName } = appStore;\n        return (\n            <Router>\n                <AppContext.Provider value={appStore}>\n                    <div className={`App bg-${commonMoodName ? commonMoodName : 'unknown'}`}>\n                        <SiteHeader\n                            toggleNavigation={this.toggleNavigation}\n                            iconClassName={iconClassName}\n                        />\n\n                        <Menu\n                            toggleNavigation={this.toggleNavigation}\n                            navigationClass={navigationClassName}\n                        />\n\n                        <div className=\"main-content\">{isDataLoaded ? <Routes /> : null}</div>\n                    </div>\n                </AppContext.Provider>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}